import Head from "next/head";
import PageLayout from "@app/layouts";
import { Pagination, PaginationProps, Table } from "antd";
import { columns } from "@app/contants/home";
import { useEffect, useState } from "react";
import { graphqlSetting } from "@app/graphql/home";
import { PageInfoTypes, TableDataType } from "@app/types/home";

export default function Home() {
  const [tableData, setTableData] = useState<Array<TableDataType>>();
  const [pageInfo, setPageInfo] = useState<PageInfoTypes>({
    currentPage: 0,
    hasNextPage: false,
    lastPage: 0,
    perPage: 0,
    total: 0,
  });
  const [page, setPage] = useState<number>(1);
  const [loading, setLoading] = useState<boolean>(false);

  useEffect(() => {
    getData(page, 20);
  }, []);

  useEffect(() => {
    getData(page, 20);
  }, [page]);

  const getData = async (page: number, perView: number) => {
    try {
      const setting = graphqlSetting(page, perView);
      setLoading(true);
      const res = await fetch(setting.url, setting.options);

      const data = await res.json();
      console.log(data.data);
      setTableData(
        data.data.Page.media.map((item: any) => ({
          key: item.id,
          title: item.title.native,
          siteUrl: item.siteUrl,
        }))
      );
      setPageInfo({
        ...data.data.Page.pageInfo,
        total:
          data.data.Page.pageInfo.total > 5000
            ? 5000
            : data.data.Page.pageInfo.total,
      });
      setLoading(false);
    } catch (error) {
      setLoading(false);
    }
  };

  const handlePagination: PaginationProps["onChange"] = (pageNumber) => {
    if (pageInfo.total > 20 * (pageNumber - 1)) {
      setPage(pageNumber);
      getData(pageNumber, 20);
    }
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageLayout>
        <Table
          columns={columns}
          dataSource={tableData}
          bordered
          pagination={false}
          loading={loading}
          scroll={{ y: "calc(100vh - 300px)" }}
        />
        <Pagination
          defaultCurrent={page}
          total={pageInfo.total}
          showSizeChanger
          defaultPageSize={20}
          pageSizeOptions={[20]}
          className="home-pagination"
          onChange={handlePagination}
        />
      </PageLayout>
    </>
  );
}
